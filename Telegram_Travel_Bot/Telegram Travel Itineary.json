{
  "name": "Telegram Travel Itineary",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -496,
        0
      ],
      "id": "c8b94a7c-7654-441a-845f-6fa029079b4c",
      "name": "Telegram Trigger",
      "webhookId": "71b8e116-96f3-4cfb-9bf1-4d39f2a55be2",
      "retryOnFail": false,
      "notesInFlow": false,
      "credentials": {
        "telegramApi": {
          "id": "1HqQV0H70rWBxPmt",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "options": {}
      },
      "type": "@tavily/n8n-nodes-tavily.tavilyTool",
      "typeVersion": 1,
      "position": [
        1008,
        352
      ],
      "id": "c3119928-f671-4196-996e-871dcd0f5a5a",
      "name": "Search in Tavily",
      "credentials": {
        "tavilyApi": {
          "id": "IYtgYZivoHmTQFmD",
          "name": "Tavily account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"destination\": \"city,country\",\n\t\"dates\": {\n      \"start\": \"YYYY-MM-DD\",\n      \"end\": \"YYYY-MM-DD\"\n    },\n    \"travellers\" : 2,\n    \"interests\" : [\"interest1\",\"interest2\"],\n    \"itinerary\" : [\n      {\n        \"day\":1,\n        \"theme\": \"Theme of the day (e.g., 'Historical Rome')\",\n        \"areas\": \"Specific areas to visit (e.g.  'Colosseum & Roman Forum')\",\n        \"activities\": [\n          \"Major landmark or activity 1\",\n          \"Major landmark or activity 2\"\n        ],\n        \"Drive KM\" : 300\n      },\n      {\n        \"day\":2,\n        \"theme\": \"Another theme (e.g., 'Vatican City & Art')\",\n        \"areas\": \"Areas for the day\",\n        \"activities\": [\n          \"Major landmark or activity 1\",\n          \"Major landmark or activity 2\"\n        ],\n        \"Drive KM\" : 400\n      }\n    ],\n    \"notes\":\"Any other key information parsed from the request (e.g., 'moderate budget').\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        48,
        368
      ],
      "id": "5f628c67-489b-47fd-adcd-c073dd5d963a",
      "name": "Planning Agent Output"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"destination\": \"city,country\",\n\t\"dates\": {\n      \"start\": \"YYYY-MM-DD\",\n      \"end\": \"YYYY-MM-DD\"\n    },\n    \"travellers\" : 2,\n    \"interests\" : [\"art\", \"food\", \"history\"],\n    \"itinerary\" : [\n      {\n        \"day\":1,\n        \"theme\": \"Theme of the day (e.g., 'Historical Rome')\",\n        \"areas\": \"Specific areas to visit (e.g.  'Colosseum & Roman Forum')\",\n        \"activities\": [\n          \"Major landmark or activity 1\",\n          \"Major landmark or activity 2\"\n        ],\n        \"weather_forecast\": \"Expected weather summary for Day 1\",\n        \"lodging\": [\n          {\n            \"name\": \"Hotel Name 1\",\n            \"price_per_night\": 250,\n            \"rating\": 4.5\n          }\n        ],\n        \"restaurants\" : [\n          {\n            \"name\":\"Restaurant name 1\",\n            \"details\": \"Brief description of cuisine and price range\",\n            \"meal type\": \"Breakfast, Lunch or Dinner\"\n          }\n        ]\n      },\n      {\n        \"day\":2,\n        \"theme\": \"Another theme (e.g., 'Vatican City & Art')\",\n        \"areas\": \"Areas for the day\",\n        \"activities\": [\n          \"Major landmark or activity 1\",\n          \"Major landmark or activity 2\"\n        ],\n        \"weather_forecast\": \"Expected weather summary for Day 2\",\n        \"lodging\": [\n          {\n            \"name\": \"Hotel Name 1\",\n            \"price_per_night\": 350,\n            \"rating\": 4.1\n          }\n        ],\n        \"restaurants\" : [\n          {\n            \"name\":\"Restaurant name 2\",\n            \"details\": \"Brief description of cuisine and price range\",\n            \"meal type\": \"Breakfast, Lunch or Dinner\"\n          }\n        ]\n      }\n    ],\n  \n    \"notes\":\"Any other key information parsed from the request (e.g., 'moderate budget').\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        192,
        368
      ],
      "id": "faaa23ec-2821-403d-999a-d9555c0427e9",
      "name": "Live Search Agent Output",
      "notesInFlow": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a specialized data-gathering agent. Your task is to enrich the provided travel plan with real-time, factual data. Using the dates and destination, you will:\n\n1. Search for 1 best hotel options with per-night prices.\n\n2. Find restaurant suggestions in the specified areas 1 each for breakfast, lunch and dinner.\n\n3. Get the weather forecast for each day of the trip.\n\nAlways use Https tool (Serper Dev) to search the latest information for all of the above. Use Tavily Search in case Server Dev fails. It takes a single parameter query, which is the search term.\n\nYour output must be a single JSON object that merges the new data with the original itinerary structure. Do not add any extra commentary or creative text. Your output must be a valid JSON object."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        208,
        0
      ],
      "id": "fae05976-f48e-49cb-b7e2-a432349e23e3",
      "name": "Live Search Agent",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -240,
        384
      ],
      "id": "6bac990f-958e-4096-a052-717272683b77",
      "name": "Gemini Flash 2.5",
      "credentials": {
        "googlePalmApi": {
          "id": "GtPxFKi1jhJ1sriv",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -400,
        384
      ],
      "id": "7ae752d1-6293-4425-abaa-c044837f0651",
      "name": "GPT 4.1 mini",
      "credentials": {
        "openAiApi": {
          "id": "6OAnJAQoDqGhCW7s",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        1120,
        352
      ],
      "id": "2f4c1959-92c9-48b5-83bf-569168d5b398",
      "name": "Calculator"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://google.serper.dev/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "5ef11ee37622f60b22ec3f8ed4474c7095f1ed22"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        864,
        352
      ],
      "id": "76076a10-1f89-4c20-b976-ad46de073d12",
      "name": "Serper Dev",
      "credentials": {
        "httpHeaderAuth": {
          "id": "utkNasGl8rw5KTn3",
          "name": "Server Dev Auth"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=You are a professional and friendly travel agent. Your job is to transform raw travel data into a client-ready itinerary.\n\nPlease follow these instructions carefully:\n\n1. Warm Welcome: Start with a friendly greeting and introduction to the trip.\n\n2. Day-by-Day Plan: Summarize each day in clear, concise language. Include:\n    - Main theme or activity\n    - Weather forecast\n    - Recommended hotel (choose the best balance of price and rating from the provided list, include nightly rate)\n    - Suggested restaurant for dinner\n\n3. Budget Summary: After the daily breakdown, create a clear budget section:\n    - Lodging cost per night × number of nights\n    - Estimated food cost per day × number of days\n    - Final total estimate\n    - Use Calculator provided as tool for any calculations if required.\n\n4. Style: Use human, natural language — no JSON, no code. Keep each day’s description short (3–4 sentences max).\n\n5. Closing: End with a warm, friendly note wishing the traveler a great journey.\n\nMust Follow\n**Keep the final text under 4000 characters to ensure it can be delivered in a single Telegram message. If needed, summarize rather than expand.**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        720,
        -16
      ],
      "id": "e88bdf39-c6e1-4f40-93da-74760c6b457b",
      "name": "Reviewer Agent"
    },
    {
      "parameters": {
        "content": "## Telegram Travel Bot",
        "height": 816,
        "width": 1968,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -672,
        -144
      ],
      "typeVersion": 1,
      "id": "70c2711a-556d-4cff-b1a4-a7dcdd2d2263",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Models",
        "height": 224,
        "width": 416,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -496,
        288
      ],
      "typeVersion": 1,
      "id": "ab75f942-d203-4a65-be13-1f16d6a20c73",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Output Parser\n",
        "height": 224,
        "width": 368,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -48,
        288
      ],
      "typeVersion": 1,
      "id": "b874c820-6850-4466-a86c-1c49ebd1ae30",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Tools\n",
        "height": 224,
        "width": 496,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        752,
        288
      ],
      "typeVersion": 1,
      "id": "63090719-ff9e-4232-8b48-1e7afed6929b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Memory\n",
        "height": 224,
        "width": 352,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        352,
        288
      ],
      "typeVersion": 1,
      "id": "94e3f54c-366d-42a5-bc44-b59a5b46b448",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1072,
        0
      ],
      "id": "2d061889-2c83-43a0-a7cb-cc1fa93f01ad",
      "name": "Send a text message",
      "webhookId": "af48d5e2-28cc-4355-8c53-60cbd5b8ac62",
      "credentials": {
        "telegramApi": {
          "id": "1HqQV0H70rWBxPmt",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "### Creates the trip's high-level, day-by-day itinerary and logistics based on the user's request.",
        "height": 128,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -240,
        -112
      ],
      "typeVersion": 1,
      "id": "465c37de-ec7f-494c-95dd-e1f63d53f510",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert travel planner. \nYour job is to parse a client's travel request and create a detailed, day-by-day plan. You must identify the destination, dates, number of travelers, kilometers travelled each day and interests. \nAlways use Tavily tool to search for the latest and accurate information.\nThen, you will create a high-level itinerary with a theme and key activities for each day. \nDo not provide any hotel or restaurant recommendations, prices, or external details. Focus solely on the itinerary structure and logistics. Format your output as a single JSON object. \nDo not add any conversational text before or after the JSON."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -208,
        0
      ],
      "id": "5286455d-b523-4b53-8738-655d9e021060",
      "name": "Planning and Logistic Agent"
    },
    {
      "parameters": {
        "content": "### Pulls in real-time, specific info on hotels, restaurant and weather using external APIs.",
        "height": 128,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        176,
        -112
      ],
      "typeVersion": 1,
      "id": "ede85125-4e91-4170-951c-c241bdeaf4a5",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "### Polishes all data into a single, message with complete budget summary.",
        "height": 128,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        704,
        -128
      ],
      "typeVersion": 1,
      "id": "4d125b48-2ea2-462f-9227-1a6a84f892a5",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id}}{{ $('Telegram Trigger').item.json.message.message_id }}_reviewer_agent",
        "tableName": "telegram_travel_bot"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1408,
        752
      ],
      "id": "5b5877aa-e7fd-436a-959f-6e851792f2be",
      "name": "Reviewer Memory",
      "credentials": {
        "postgres": {
          "id": "Rok0eE2Xumnm9GZy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e5be3078-c52f-491e-a358-6b312f04eb98",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        528,
        64
      ],
      "id": "be6109bd-4665-46c7-8030-4486027836bb",
      "name": "JSON Schema"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id}}{{ $('Telegram Trigger').item.json.message.message_id }}",
        "tableName": "telegram_travel_bot"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        496,
        368
      ],
      "id": "81897de1-a6ef-4627-a852-cf0685296dbd",
      "name": "Agent Memory",
      "credentials": {
        "postgres": {
          "id": "Rok0eE2Xumnm9GZy",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Planning and Logistic Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search in Tavily": {
      "ai_tool": [
        [
          {
            "node": "Live Search Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Planning and Logistic Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Planning Agent Output": {
      "ai_outputParser": [
        [
          {
            "node": "Planning and Logistic Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Live Search Agent Output": {
      "ai_outputParser": [
        [
          {
            "node": "Live Search Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Live Search Agent": {
      "main": [
        [
          {
            "node": "Reviewer Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "JSON Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Flash 2.5": {
      "ai_languageModel": [
        [
          {
            "node": "Live Search Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4.1 mini": {
      "ai_languageModel": [
        [
          {
            "node": "Planning and Logistic Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Reviewer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Reviewer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Serper Dev": {
      "ai_tool": [
        [
          {
            "node": "Live Search Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reviewer Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planning and Logistic Agent": {
      "main": [
        [
          {
            "node": "Live Search Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reviewer Memory": {
      "ai_memory": [
        []
      ]
    },
    "JSON Schema": {
      "main": [
        [
          {
            "node": "Reviewer Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Memory": {
      "ai_memory": [
        [
          {
            "node": "Planning and Logistic Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Reviewer Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5d1d85ac-14ca-4139-9598-d6b4ba3a5930",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "052deb21324a458acf68d6e6b1f6bb938fa82561254c06e33effad86acb18782"
  },
  "id": "B8id02OZXKZBazOW",
  "tags": []
}